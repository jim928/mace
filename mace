#!/usr/bin/env bash

version="0.1.68"

script_name=$(basename "$0")
jim928Path=$(brew --repo)/Library/Taps/jim928
maceWorkDir="$HOME/.mace"
maceGitUrl="https://jim928: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@github.com/jim928/mace.git"
homebrew_mace_url="https://jim928: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@github.com/jim928/homebrew-mace.git"

usage() {
  cat <<EOF
Script name: $script_name
Description:
============

This is a script to config environment of mac dev in dev Apps
~/Library/Application Support/Google
~/Library/Developer/Xcode/UserData

jim@jimdeMBP ~ % brew --repo
/usr/local/Homebrew
jim@jimdeMBP ~ % brew --repo jim928/mace
/usr/local/Homebrew/Library/Taps/jim928/homebrew-mace

how to publish new version of mace;
1,new code in mace git project and commit and push;
2,make new tag from the last commit and push;
3,make new release from the tag just made;
4,right click and copy the link from the release : Source code (tar.gz);
5,open terminal , and use command : brew create linkJustCopied;
6,input the formulaName : mace and copy the sha256 value;
7,update the link and the sha256 to the git project : homebrew-mace and push;
8,delete the mace.rb file created in step 7;  (use deleterb command)

Examples:
=========
    # config for all (AndroidStudio,Xcode)
    $script_name config
    # config for AndroidStudio
    $script_name configas
    # config for Xcode
    $script_name configxc
    # Show help
    $script_name -h
    # Show version
    $script_name -v
    # push local change to github for AndroidStudio templates
    $script_name pushas
    # push local change to github for XCode CodeSnippets
    $script_name pushxc
    # push local change to github for IdeaIC templates
    $script_name pushidea
    # push local change to github for templates and CodeSnippets
    $script_name push
    # find and delete the mace.rb file in update steps
    $script_name deleterb
    # generate id_ed25519 sshkey if not exist,and copy to clipboard
    $script_name sshkey
EOF
}

githubHelp() {
  cat <<EOF
1，settings
2，Developer settings
3, Personal access tokens
4, Generate new token
5, set expiration and repo access check
6, generate 复制好生成的token内容
7, brew install gh
8, gh auth login
9, GitHub.com -> HTTPS -> y -> Login with a web browser
EOF
}
# shell cheat sheet https://devhints.io/bash

#homebrew 库的目录 ： jim928Path

configFunc() {
  taskName=""
  appPath=""
  gitUrl=""
  gitProjectName=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IdeaIC"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IdeaIC"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  echo "**********************************"
  echo "--taskName : $taskName"
  echo "--appPath : $appPath"
  echo "--gitUrl : $gitUrl"
  echo "--gitProjectName : $gitProjectName"
  echo "--shouldLoop : $shouldLoop"
  echo "--appName : $appName"
  echo "--finalFolder : $finalFolder"

  echo "now start config for task : $taskName"

  cd "$jim928Path" || echo "cd to path failed :$jim928Path"

  #文件夹存在则删除其内容
  if [ -d "$gitProjectName" ]; then
    rm -rf ./"$gitProjectName"
    echo "removing all files in $gitProjectName"
  fi

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist, now delete it and mkdir"
        rm -rf "$finalFolder"
      fi

      #clone的时候修改文件名称为 finalFolder
      git clone "$gitUrl" "$finalFolder"
    done
  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist, now delete it and mkdir"
      rm -rf "$finalFolder"
    fi

    #clone的时候修改文件名称为 finalFolder
    git clone "$gitUrl" "$finalFolder"
  fi

  echo "task $taskName done"
}

configAndroidStudio() {
  configFunc 1
  configFunc 2
}

configXCode() {
  configFunc 3
}

configIdea() {
  configFunc 5
  configFunc 6
}

deleterb() {
  find $(brew --repo)/Library/Taps/homebrew/homebrew-core -name 'mace.rb' -type f -print -exec rm -rf {} \;
}

openGoogleFolder() {
  open ~/Library/Application\ Support/Google
}
openUserDataFolder() {
  open ~/Library/Developer/Xcode/UserData
}
openJetBrainFolder() {
  open ~/Library/Application\ Support/JetBrains
}

getSSHKey() {
  FILE=~/.ssh/id_ed25519.pub
  if test -f "$FILE"; then
    echo "$FILE exist"
  else
    echo "generate now"
    ssh-keygen -t ed25519 -C "<$(date +%Y%m%d)$USER>"
  fi
  echo "now its in clipboard"
  tr -d '\n' <~/.ssh/id_ed25519.pub | pbcopy
}

pushFuc() {
  taskName=""
  appPath=""
  gitUrl=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IdeaIC"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IdeaIC"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist"
        cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

        if [ -n "$(git status --porcelain)" ]; then
          echo "there is change to push , now commit and push"
          git add .
          git commit -m "triggled by auto check from mace}." -a
          git push "${gitUrl}" HEAD:master
        else
          echo "nothing to update."
        fi
      else
        echo "folder /$finalFolder not exist , no need to push"
      fi
    done

  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist"
      cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

      if [ -n "$(git status --porcelain)" ]; then
        echo "there is change to push , now commit and push"
        git add .
        git commit -m "triggled by auto check from mace}." -a
        git push "${gitUrl}" HEAD:master
      else
        echo "nothing to update."
      fi
    else
      echo "folder /$finalFolder not exist , no need to push"
    fi
  fi

  echo "task $taskName done"
}

pushAndroidStudio() {
  pushFuc 1
  pushFuc 2
}
pushXCode() {
  pushFuc 3
}
pushIdeaC() {
  pushFuc 5
  pushFuc 6
}
#################### test func ####################
testFunc() {
  echo "testFunc"
  makeASOpen
}
####################### make open in android studio work flow  ####################
makeASOpen() {
  createMaceFolder
  createZSHRC
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  if [ -d "publicfiles" ]; then
    echo "dir publicfiles exist"
  else
    echo "dir publicfiles not exist, now clone"
    git clone https://github.com/jim928/publicfiles.git
  fi
  echo "coping publicfiles to ~/Library/Services/"
  cp -r publicfiles/* ~/Library/Services/
}
createMaceFolder() {
  if [ ! -d "$maceWorkDir" ]; then
    mkdir "$maceWorkDir"
  fi
}
createZSHRC() {
  #!/bin/bash
  zshrc_path="$HOME/.zshrc"
  # 检查是否存在 .zshrc 文件
  if [ ! -f "$zshrc_path" ]; then
    # 如果不存在，则创建 .zshrc 文件
    echo "Creating .zshrc file..."
    touch "$zshrc_path"

    # 在 .zshrc 文件中添加一些示例内容
    echo '#this is a new .zshrc' >>"$zshrc_path"
    echo 'export PATH=/Applications/Android\ Studio.app/Contents/MacOS/' >>"$zshrc_path"

    echo "Done! You can customize the .zshrc file as needed."
    source "$zshrc_path"
  else
    echo ".zshrc file already exists."
  fi
}

####################### mace work foler ####################
makeMaceWorkFolder() {
  createMaceFolder
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  git clone "${maceGitUrl}"
}

#################### publish new version of mace ####################
publishNewVersion() {
  cd "$maceWorkDir/mace" || echo "cd to path failed :$maceWorkDir/mace"

  # 删除所有本地标签
  git tag -l | xargs git tag -d >/dev/null 2>&1

  # 拉取最新标签
  git fetch --tags >/dev/null 2>&1
  git pull

  # 修改版本号
  # 获取当前文件夹下 mace 文件的版本号
  current_version=$(grep 'version=' mace | sed -n 's/version="\([^"]*\)".*/\1/p' | head -n 1)

  # 递增版本号
  new_version=$(awk -F. -v OFS=. '{print $1,$2,$3+1}' <<<"$current_version")

  # 使用 sed 命令替换文件中的 version 变量
  sed -i '' "s/version=\"$current_version\"/version=\"$new_version\"/" mace

  # 输出新版本号``
  echo "Old Version: $current_version"
  echo "New Version: $new_version"

  git add .
  git commit -m "publishMac commit from mace}." -a
  #  git push "${maceGitUrl}" HEAD:master

  # 创建新 tag
  git tag -a "$new_version" -m "$new_version"

  # 推送所有分支和标签
  git push "${maceGitUrl}" HEAD:master
  echo "push mace changes to $maceGitUrl done"
  git push --tags "${maceGitUrl}"
  echo "push mace tags to $maceGitUrl done"

  ########## release new version to github ########
  # Replace with your GitHub username and repository name
  USERNAME="jim928"
  REPO="mace"

  # Replace with the tag name you want to create a release from
  TAG="$new_version"

  # GitHub Personal Access Token for authentication
  TOKEN="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"

  # Release notes for the new release
  RELEASE_NOTES="Release notes for version $TAG"

  # Create a release using the GitHub API
  response=$(curl -s -X POST \
    -H "Authorization: token $TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/repos/$USERNAME/$REPO/releases" \
    -d "{\"tag_name\":\"$TAG\",\"name\":\"$TAG\",\"body\":\"$RELEASE_NOTES\"}")

  # Print the response from GitHub API
  echo "$response"

  # Extract the release ID from the response
  release_id=$(echo "$response" | jq -r '.id')
  echo "Release ID: $release_id"

  # 提取源代码（tar.gz）文件的下载链接
  download_url="https://github.com/jim928/mace/archive/refs/tags/$new_version.tar.gz"

  # 打印下载链接
  echo "源代码下载链接: $download_url"

  ######## 开始brew 发布 流程 ########
  # Formula name
  formula_name="mace"

  # Source URL
  source_url="$download_url"

  ######## 生成 mace.rb 文件 ########

  # Homebrew Core Formula directory
  formula_directory="$HOME/.mace/homebrew-mace"

  # if formula_directory not exist, clone it else update it
  if [ ! -d "$formula_directory" ]; then
    mkdir -p "$formula_directory"
    git clone "${homebrew_mace_url}" "$formula_directory"
  else
    cd "$formula_directory" || {
      echo "cd to path failed: $formula_directory"
      exit 1
    }
    git fetch && git pull
  fi

  cd "$formula_directory" || {
    echo "cd to path failed: $formula_directory"
    exit 1
  }

  mace_formula_path="$formula_directory/$formula_name.rb"

  # Create mace.rb with SHA256 checksum
  echo "class Mace < Formula" >"$mace_formula_path"
  echo "  desc \"Your description here\"" >>"$mace_formula_path"
  echo "  homepage \"https://github.com/jim928/mace\"" >>"$mace_formula_path"
  echo "  url \"$source_url\"" >>"$mace_formula_path"
  echo "  sha256 \"$(curl -Ls "$source_url" | shasum -a 256 | cut -d ' ' -f 1)\"" >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  # ... 其他 Formula 配置信息 ..." >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  def install" >>"$mace_formula_path"
  echo "    bin.install 'mace'" >>"$mace_formula_path"
  echo "  end" >>"$mace_formula_path"
  echo "end" >>"$mace_formula_path"

  # Print the path to the created mace.rb file
  echo "Formula file created at: $mace_formula_path"

  git add .
  git commit -m "publish mace.rb $new_version commit from mace}." -a
  git push "${homebrew_mace_url}" HEAD:master
}

################ upgrade mace version from brew ###############
upgradeFunc() {
  brew uninstall mace
  brew untap jim928/mace
  brew tap jim928/mace
  brew install mace
}

while (($# > 0)); do # while arguments count>0
  case "$1" in
  #    -l | --lang)
  #        prog_lang=$2
  #        shift
  #        ;;
  #    -d | --dir)
  #        dir=$2
  #        shift 2
  #        ;;
  -h | --help)
    usage
    exit
    ;;
  -v | --version)
    echo ${version}
    exit
    ;;
  "configas")
    configAndroidStudio
    exit
    ;;
  "configxc")
    configXCode
    exit
    ;;
  "configidea")
    configIdea
    exit
    ;;
  "config")
    echo "now config for all"
    configAndroidStudio
    configXCode
    configIdea
    exit
    ;;
  "pushas")
    pushAndroidStudio
    exit
    ;;
  "pushxc")
    pushXCode
    exit
    ;;
  "pushidea")
    pushIdeaC
    exit
    ;;
  "push")
    pushAndroidStudio
    pushXCode
    pushIdeaC
    exit
    ;;
  "deleterb")
    deleterb
    exit
    ;;
  "sshkey")
    getSSHKey
    exit
    ;;
  "github")
    githubHelp
    exit
    ;;
  "opengoogle")
    openGoogleFolder
    exit
    ;;
  "openuserdata")
    openUserDataFolder
    exit
    ;;
  "openjetbrain")
    openJetBrainFolder
    exit
    ;;
  "makemace")
    makeMaceWorkFolder
    exit
    ;;
  "publish")
    publishNewVersion
    exit
    ;;
  "makeasopen")
    makeASOpen
    exit
    ;;
  "upgrade")
    upgradeFunc
    exit
    ;;
  "test")
    testFunc
    exit
    ;;
  *) # unknown flag/switch
    POSITIONAL+=("$1")
    shift
    ;;
  esac
done
