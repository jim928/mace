#!/usr/bin/env bash

version="0.1.141"

script_name=$(basename "$0")
jim928Path=$(brew --repo)/Library/Taps/jim928
maceWorkDir="$HOME/.mace"
maceGitUrl="git@github.com:jim928/mace.git"
homebrew_mace_url="git@github.com:jim928/homebrew-mace.git"

usage() {
  # 打印可用的方法列表
  for func in "${functions[@]}"; do
    name="${func%%:*}"
    method="${func##*:}"
    echo "$name ---------- $method"
  done
}
howToCreateMace() {
  cat <<EOF
  Script name: $script_name
  Description:
  ============

  This is a script to config environment of mac dev in dev Apps
  ~/Library/Application Support/Google
  ~/Library/Developer/Xcode/UserData

  jim@jimdeMBP ~ % brew --repo
  /usr/local/Homebrew
  jim@jimdeMBP ~ % brew --repo jim928/mace
  /usr/local/Homebrew/Library/Taps/jim928/homebrew-mace

  how to publish new version of mace;
  1,new code in mace git project and commit and push;
  2,make new tag from the last commit and push;
  3,make new release from the tag just made;
  4,right click and copy the link from the release : Source code (tar.gz);
  5,open terminal , and use command : brew create linkJustCopied;
  6,input the formulaName : mace and copy the sha256 value;
  7,update the link and the sha256 to the git project : homebrew-mace and push;
  8,delete the mace.rb file created in step 7;  (use deleterb command)
EOF
}

githubHelp() {
  cat <<EOF
1，settings
2，Developer settings
3, Personal access tokens
4, Generate new token
5, set expiration and repo access check
6, generate 复制好生成的token内容
7, brew install gh
8, gh auth login
9, GitHub.com -> HTTPS -> y -> Login with a web browser
EOF
}
# shell cheat sheet https://devhints.io/bash

#homebrew 库的目录 ： jim928Path

configFunc() {
  taskName=""
  appPath=""
  gitUrl=""
  gitProjectName=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="templates"
  elif [ "$1" = 7 ]; then
    taskName="GoLandKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="keymaps"
  elif [ "$1" = 8 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="templates"
  elif [ "$1" = 9 ]; then
    taskName="PyCharmKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="keymaps"
  elif [ "$1" = 10 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  echo "**********************************"
  echo "--taskName : $taskName"
  echo "--appPath : $appPath"
  echo "--gitUrl : $gitUrl"
  echo "--gitProjectName : $gitProjectName"
  echo "--shouldLoop : $shouldLoop"
  echo "--appName : $appName"
  echo "--finalFolder : $finalFolder"

  echo "now start config for task : $taskName"

  cd "$jim928Path" || echo "cd to path failed :$jim928Path"

  #文件夹存在则删除其内容
  if [ -d "$gitProjectName" ]; then
    rm -rf ./"$gitProjectName"
    echo "removing all files in $gitProjectName"
  fi

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist, now delete it and mkdir"
        rm -rf "$finalFolder"
      fi

      #clone的时候修改文件名称为 finalFolder
      git clone "$gitUrl" "$finalFolder"
    done
  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist, now delete it and mkdir"
      rm -rf "$finalFolder"
    fi

    #clone的时候修改文件名称为 finalFolder
    git clone "$gitUrl" "$finalFolder"
  fi

  echo "task $taskName done"
}

configAndroidStudio() {
  configFunc 1
  configFunc 2
}

configXCode() {
  configFunc 3
}

configIdea() {
  configFunc 5
  configFunc 6
  configFunc 7
  configFunc 8
  configFunc 9
  configFunc 10
}
configAll() {
  configAndroidStudio
  configXCode
  configIdea
}

deleterb() {
  find $(brew --repo)/Library/Taps/homebrew/homebrew-core -name 'mace.rb' -type f -print -exec rm -rf {} \;
}

openGoogleFolder() {
  open ~/Library/Application\ Support/Google
}
openUserDataFolder() {
  open ~/Library/Developer/Xcode/UserData
}
openJetBrainFolder() {
  open ~/Library/Application\ Support/JetBrains
}

getSSHKey() {
  # 查找 ~/.ssh/ 目录下所有的 .pub 文件
  pub_files=$(find ~/.ssh -name "*.pub")
  pub_files_array=($pub_files)

  if [ ${#pub_files_array[@]} -gt 0 ]; then
    echo "找到以下SSH公钥文件："
    select pub_file in "${pub_files_array[@]}"; do
      if [ -n "$pub_file" ]; then
        # 将选定的公钥文件内容复制到剪贴板
        cat "$pub_file" | pbcopy
        echo "$pub_file 现在已经复制到剪贴板"
        break
      else
        echo "无效选择。"
      fi
    done
  else
    echo "未找到SSH公钥文件，现在生成一个。"
    makessh
  fi
}

pushFuc() {
  taskName=""
  appPath=""
  gitUrl=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="templates"
  elif [ "$1" = 7 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="keymaps"
  elif [ "$1" = 8 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="templates"
  elif [ "$1" = 9 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="keymaps"
  elif [ "$1" = 10 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  echo "**********************************"
  echo "--taskName : $taskName"
  echo "--appPath : $appPath"
  echo "--gitUrl : $gitUrl"
  echo "--gitProjectName : $gitProjectName"
  echo "--shouldLoop : $shouldLoop"
  echo "--appName : $appName"
  echo "--finalFolder : $finalFolder"

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist"
        cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

        if [ -n "$(git status --porcelain)" ]; then
          echo "there is change to push , now commit and push"
          git add .
          git commit -m "triggled by auto check from mace}." -a
          git push "${gitUrl}" HEAD:master
        else
          echo "nothing to update."
        fi
      else
        echo "folder /$finalFolder not exist , no need to push"
      fi
    done

  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist"
      cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

      if [ -n "$(git status --porcelain)" ]; then
        echo "there is change to push , now commit and push"
        git add .
        git commit -m "triggled by auto check from mace}." -a
        git push "${gitUrl}" HEAD:master
      else
        echo "nothing to update."
      fi
    else
      echo "folder /$finalFolder not exist , no need to push"
    fi
  fi

  echo "task $taskName done"
}

pushAndroidStudio() {
  pushFuc 1
  pushFuc 2
}
pushXCode() {
  pushFuc 3
}
pushIdeaC() {
  pushFuc 5
  pushFuc 6
  pushFuc 7
  pushFuc 8
  pushFuc 9
  pushFuc 10
}
pushAll() {
  pushAndroidStudio
  pushXCode
  pushIdeaC
}
#################### test func ####################
testFunc() {
  echo "testFunc"
}
####################### make open in android studio work flow  ####################
makeASOpen() {
  createMaceFolder
  createZSHRC
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  if [ -d "publicfiles" ]; then
    echo "dir publicfiles exist"
  else
    echo "dir publicfiles not exist, now clone"
    git clone https://github.com/jim928/publicfiles.git
  fi
  echo "coping publicfiles to ~/Library/Services/"
  cp -r publicfiles/* ~/Library/Services/
}
createMaceFolder() {
  if [ ! -d "$maceWorkDir" ]; then
    mkdir "$maceWorkDir"
  fi
}
createZSHRC() {
  #!/bin/bash
  zshrc_path="$HOME/.zshrc"
  # 检查是否存在 .zshrc 文件
  if [ ! -f "$zshrc_path" ]; then
    # 如果不存在，则创建 .zshrc 文件
    echo "Creating .zshrc file..."
    touch "$zshrc_path"

    # 在 .zshrc 文件中添加一些示例内容
    echo '#this is a new .zshrc' >>"$zshrc_path"
    #    echo 'export PATH=/Applications/Android\ Studio.app/Contents/MacOS/' >>"$zshrc_path"
    echo "export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Android Studio.app/Contents/MacOS/:$PATH"" >>"$zshrc_path"

    echo "Done! You can customize the .zshrc file as needed."
    source "$zshrc_path"
  else
    # 如果已经存在 .zshrc 文件，则将/Applications/Android Studio.app/Contents/MacOS 路径加入环境变量
    echo "export PATH="/Applications/Android Studio.app/Contents/MacOS:$PATH"" >>"$zshrc_path"
    source "$zshrc_path"
    echo ".zshrc file already exists. add Applications/Android Studio.app/Contents/MacOS to path in .zshrc"
  fi
}

####################### mace work foler ####################
makeMaceDevFolder() {
  echo "makeMaceDevFolder"
  createMaceFolder
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  if [ -d "mace" ]; then
    echo "Directory mace already exists. Skipping clone."
  else
    git clone "${maceGitUrl}"
  fi
}

#################### publish new version of mace ####################
publishNewVersion() {
  cd "$maceWorkDir/mace" || echo "cd to path failed :$maceWorkDir/mace"

  # 删除所有本地标签
  git tag -l | xargs git tag -d >/dev/null 2>&1

  # 拉取最新标签
  git fetch --tags >/dev/null 2>&1
  git pull

  # 修改版本号
  # 获取当前文件夹下 mace 文件的版本号
  current_version=$(grep 'version=' mace | sed -n 's/version="\([^"]*\)".*/\1/p' | head -n 1)

  # 递增版本号
  new_version=$(awk -F. -v OFS=. '{print $1,$2,$3+1}' <<<"$current_version")

  # 使用 sed 命令替换文件中的 version 变量
  sed -i '' "s/version=\"$current_version\"/version=\"$new_version\"/" mace

  # 输出新版本号``
  echo "Old Version: $current_version"
  echo "New Version: $new_version"

  # 获取当前日期
  current_date=$(date +"%Y-%m-%d")
  git add .
  git commit -m "publishMac commit from mace - ${current_date}." -a
  #  git push "${maceGitUrl}" HEAD:master

  # 创建新 tag
  git tag -a "$new_version" -m "$new_version"

  # 推送所有分支和标签
  git push "${maceGitUrl}" HEAD:master
  echo "push mace changes to $maceGitUrl done"
  git push --tags "${maceGitUrl}"
  echo "push mace tags to $maceGitUrl done"

  ########## release new version to github ########
  # Replace with your GitHub username and repository name
  USERNAME="jim928"
  REPO="mace"

  # Replace with the tag name you want to create a release from
  TAG="$new_version"

  RELEASE_NOTES="Release notes for version $TAG"

  echo "Creating GitHub release..."
  response=$(curl -s -X POST \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Content-Type: application/json" \
    "https://api.github.com/repos/$USERNAME/$REPO/releases" \
    -d "{\"tag_name\":\"$TAG\",\"name\":\"$TAG\",\"body\":\"$RELEASE_NOTES\"}")

  # Print the response from GitHub API
  echo "$response"

  # Extract the release ID from the response
  release_id=$(echo "$response" | jq -r '.id')
  echo "Release ID: $release_id"

  # 提取源代码（tar.gz）文件的下载链接
  download_url="https://github.com/jim928/mace/archive/refs/tags/$new_version.tar.gz"

  # 打印下载链接
  echo "源代码下载链接: $download_url"

  ######## 开始brew 发布 流程 ########
  # Formula name
  formula_name="mace"

  # Source URL
  source_url="$download_url"

  ######## 生成 mace.rb 文件 ########

  # Homebrew Core Formula directory
  formula_directory="$HOME/.mace/homebrew-mace"

  # if formula_directory not exist, clone it else update it
  if [ ! -d "$formula_directory" ]; then
    echo "homebrew-mace directory does not exist. Cloning..."
    mkdir -p "$formula_directory"
    git clone "${homebrew_mace_url}" "$formula_directory"
  else
    echo "homebrew-mace directory exists. Updating..."
    cd "$formula_directory" || {
      echo "cd to path failed: $formula_directory"
      exit 1
    }
    git fetch && git pull
  fi

  cd "$formula_directory" || {
    echo "cd to path failed: $formula_directory"
    exit 1
  }

  mace_formula_path="$formula_directory/$formula_name.rb"

  # Create mace.rb with SHA256 checksum
  echo "class Mace < Formula" >"$mace_formula_path"
  echo "  desc \"Your description here\"" >>"$mace_formula_path"
  echo "  homepage \"https://github.com/jim928/mace\"" >>"$mace_formula_path"
  echo "  url \"$source_url\"" >>"$mace_formula_path"
  echo "  sha256 \"$(curl -Ls "$source_url" | shasum -a 256 | cut -d ' ' -f 1)\"" >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  # ... 其他 Formula 配置信息 ..." >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  def install" >>"$mace_formula_path"
  echo "    bin.install 'mace'" >>"$mace_formula_path"
  echo "  end" >>"$mace_formula_path"
  echo "end" >>"$mace_formula_path"

  # Print the path to the created mace.rb file
  echo "Formula file created at: $mace_formula_path"

  git add .
  git commit -m "publish mace.rb $new_version commit from mace}." -a
  git push "${homebrew_mace_url}" HEAD:master
}

################ upgrade mace version from brew ###############
upgradeFunc() {
  brew uninstall mace
  brew untap jim928/mace
  brew tap jim928/mace
  brew install mace
}

################ delete all .lock files ################
deleteAllLockFiles() {
  echo "find . -name '*.lock' -type f -print -exec rm -rf {} \;"
  find . -name '*.lock' -type f -print -exec rm -rf {} \;
}

showColors() {
  echo "透明度从100%到0%的16进制值及对应百分比："
  colorList="100% — FF,99% — FC,98% — FA,97% — F7,96% — F5,95% — F2,94% — F0,93% — ED,92% — EB,91% — E8,90% — E6,89% — E3,88% — E0,87% — DE,86% — DB,85% — D9,84% — D6,83% — D4,82% — D1,81% — CF,80% — CC,79% — C9,78% — C7,77% — C4,76% — C2,75% — BF,74% — BD,73% — BA,72% — B8,71% — B5,70% — B3,69% — B0,68% — AD,67% — AB,66% — A8,65% — A6,64% — A3,63% — A1,62% — 9E,61% — 9C,60% — 99,59% — 96,58% — 94,57% — 91,56% — 8F,55% — 8C,54% — 8A,53% — 87,52% — 85,51% — 82,50% — 80,49% — 7D,48% — 7A,47% — 78,46% — 75,45% — 73,44% — 70,43% — 6E,42% — 6B,41% — 69,40% — 66,39% — 63,38% — 61,37% — 5E,36% — 5C,35% — 59,34% — 57,33% — 54,32% — 52,31% — 4F,30% — 4D,29% — 4A,28% — 47,27% — 45,26% — 42,25% — 40,24% — 3D,23% — 3B,22% — 38,21% — 36,20% — 33,19% — 30,18% — 2E,17% — 2B,16% — 29,15% — 26,14% — 24,13% — 21,12% — 1F,11% — 1C,10% — 1A,9% — 17,8% — 14,7% — 12,6% — 0F,5% — 0D,4% — 0A,3% — 08,2% — 05,1% — 03,0% — 00"
  echo "$colorList" | tr ',' '\n'
}

jetbrains_apps=("PyCharm" "GoLand" "IntelliJ IDEA" "IntelliJ IDEA CE" "WebStorm" "CLion" "PhpStorm" "RubyMine" "DataGrip")

configMaceDevTable() {
  # Use ANSI escape codes for colored output
  RED='\033[31m'
  NC='\033[0m' # No Color

  # Check if the .mace directory exists in the home directory, if not, create it
  if [ ! -d "$HOME/.mace" ]; then
    mkdir "$HOME/.mace"
    echo ".mace directory created in home directory."
  else
    echo ".mace directory already exists."
  fi
  # Change directory to ~/.mace
  cd "$HOME/.mace"
  # Check if the .mace directory is empty before cloning
     echo "Cloning repository from $maceGitUrl into ~/.mace/mace..."
    if [ -d "$HOME/.mace/mace" ]; then
      echo "Directory ~/.mace/mace already exists. Skipping clone."
    else
      if git clone "$maceGitUrl" "$HOME/.mace/mace"; then
        echo "Repository cloned successfully into ~/.mace/mace."
      else
        echo -e "${RED}Failed to clone repository into ~/.mace/mace. Please check your SSH permissions.${NC}"
      fi
    fi

    echo "Cloning repository from $homebrew_mace_url into ~/.mace/homebrew-mace..."
    if [ -d "$HOME/.mace/homebrew-mace" ]; then
      echo "Directory ~/.mace/homebrew-mace already exists. Skipping clone."
    else
      if git clone "$homebrew_mace_url" "$HOME/.mace/homebrew-mace"; then
        echo "Homebrew-mace repository cloned successfully into ~/.mace/homebrew-mace."
      else
        echo -e "${RED}Failed to clone homebrew-mace repository into ~/.mace/homebrew-mace. Please check your SSH permissions.${NC}"
      fi
    fi

  # List of JetBrains IDEs to try, including IntelliJ IDEA Community Edition
  for app in "${jetbrains_apps[@]}"; do
    echo "Attempting to open ~/.mace/mace with $app..."
    if open -a "$app" "$HOME/.mace/mace"; then
      echo "Opened ~/.mace/mace with $app."
      break
    else
      echo "$app failed to open ~/.mace. Trying next..."
    fi
  done

}

importSettings() {
  # Clone the dev_settings repository into the ~/.mace/dev_settings directory if it doesn't exist
  if [ ! -d "$HOME/.mace/dev_settings" ]; then
    echo "Cloning repository from git@github.com:Griffinsin/dev_settings.git into ~/.mace/dev_settings..."
    if git clone "git@github.com:Griffinsin/dev_settings.git" "$HOME/.mace/dev_settings"; then
      echo "Repository cloned successfully into ~/.mace/dev_settings."
    else
      echo -e "${RED}Failed to clone repository into ~/.mace/dev_settings. Please check your SSH permissions.${NC}"
    fi
  else
    echo "Directory ~/.mace/dev_settings already exists. Attempting to update the repository..."
    cd "$HOME/.mace/dev_settings"
    if git pull; then
      echo "Repository updated successfully."
    else
      echo -e "${RED}Failed to update the repository. Please check your network connection and permissions.${NC}"
    fi
  fi

  # Iterate over JetBrains IDEs
  for app in "${jetbrains_apps[@]}"; do
    # Use a wildcard to match versioned directories in JetBrains folder
    for config_dir in "$HOME/Library/Application Support/JetBrains/${app}"*; do
      if [ -d "$config_dir" ]; then
        cp -r "$HOME/.mace/dev_settings/keymaps" "$config_dir"
        cp -r "$HOME/.mace/dev_settings/templates" "$config_dir"
        print_color "$GREEN" "Settings copied to $app."
      # else
      #   echo "$app configuration directory not found."
      fi
    done
  done

  # Handle Android Studio separately
  for config_dir in "$HOME/Library/Application Support/Google/AndroidStudio"*; do
    if [ -d "$config_dir" ]; then
      cp -r "$HOME/.mace/dev_settings/keymaps" "$config_dir"
      cp -r "$HOME/.mace/dev_settings/templates" "$config_dir"
      print_color "$GREEN" "Settings copied to Android Studio."
    else
      echo "Android Studio configuration directory not found."
    fi
  done

  # Handle Xcode CodeSnippets
  local xcode_snippets_dir="$HOME/Library/Developer/Xcode/UserData/CodeSnippets"
  if [ -d "$HOME/.mace/dev_settings/CodeSnippets" ]; then
    mkdir -p "$xcode_snippets_dir"
    cp -r "$HOME/.mace/dev_settings/CodeSnippets"/* "$xcode_snippets_dir"
    print_color "$GREEN" "CodeSnippets copied to Xcode."
  else
    echo "CodeSnippets directory not found in dev_settings."
  fi
}

uploadSettings() {
  # uploadSettings 方法说明：
  # 该方法用于同步 JetBrains IDE 的设置到 dev_settings 目录。
  # 方法逻辑如下：
  # 1. 遍历所有配置的 JetBrains IDE。
  # 2. 对于每个 IDE，检查 keymaps 和 templates 目录。
  # 3. 将每个目录中的所有非隐藏文件复制到 dev_settings 中对应的目录。
  # 4. 使用 Git 检查 dev_settings 目录中的更改。
  # 5. 如果检测到更改，提交并推送到远程仓库，然后退出循环，确保每次调用最多只会产生一次提交。
  # 6. 如果没有检测到更改，继续检查下一个目录。
  # 7. 如果所有目录都没有更改，输出提示信息。

  local repo_dir="$HOME/.mace/dev_settings"
  echo "Syncing settings from JetBrains IDEs to $repo_dir..."
  
  # Iterate over JetBrains IDEs
  for app in "${jetbrains_apps[@]}"; do
    for config_dir in "$HOME/Library/Application Support/JetBrains/${app}"*; do
      if [ -d "$config_dir" ]; then
        for sub_dir in keymaps templates; do
          if [ -d "$config_dir/$sub_dir" ]; then
            echo "Copying files from $sub_dir in $config_dir to $repo_dir..."
            # Copy all non-hidden files to the destination directory
            cp -r "$config_dir/$sub_dir"/* "$repo_dir/$sub_dir/"
            
            # Check for changes and commit
            cd "$repo_dir"
            if [ -n "$(git status --porcelain)" ]; then
              git add .
              git commit -m "Update $sub_dir from $app"
              git push origin main
              print_color "$GREEN" "Changes in $sub_dir from $app uploaded successfully."
              return 0  # Exit the function after a successful commit
            else
              print_color "$GREEN" "No changes to commit for $sub_dir from $app."
            fi
          else
            print_color "$RED" "$sub_dir directory not found in $app."
          fi
        done
      else
        print_color "$RED" "$app configuration directory not found."
      fi
    done
  done

  # Handle Android Studio
  echo "Syncing settings from Android Studio to $repo_dir..."
  for config_dir in "$HOME/Library/Application Support/Google/AndroidStudio"*; do
    if [ -d "$config_dir" ]; then
      for sub_dir in keymaps templates; do
        if [ -d "$config_dir/$sub_dir" ]; then
          echo "Copying files from $sub_dir in $config_dir to $repo_dir..."
          cp -r "$config_dir/$sub_dir"/* "$repo_dir/$sub_dir/"
          
          # Check for changes and commit
          cd "$repo_dir"
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update $sub_dir from Android Studio"
            git push origin main
            print_color "$GREEN" "Changes in $sub_dir from Android Studio uploaded successfully."
            return 0  # Exit the function after a successful commit
          else
            print_color "$GREEN" "No changes to commit for $sub_dir from Android Studio."
          fi
        else
          print_color "$RED" "$sub_dir directory not found in Android Studio."
        fi
      done
    else
      echo "Android Studio configuration directory not found."
    fi
  done

  # Handle Xcode CodeSnippets
  local xcode_snippets_dir="$HOME/Library/Developer/Xcode/UserData/CodeSnippets"
  if [ -d "$xcode_snippets_dir" ]; then
    echo "Syncing Xcode CodeSnippets to $repo_dir..."
    rm -rf "$repo_dir/CodeSnippets"  # Clear the destination directory
    mkdir -p "$repo_dir/CodeSnippets"
    cp -r "$xcode_snippets_dir"/* "$repo_dir/CodeSnippets/"
    
    # Check for changes and commit
    cd "$repo_dir"
    git add -A  # Ensure all files in CodeSnippets are tracked
    if [ -n "$(git status --porcelain)" ]; then
      git commit -m "Update CodeSnippets from Xcode"
      git push origin main
      print_color "$GREEN" "Xcode CodeSnippets uploaded successfully."
      return 0  # Exit the function after a successful commit
    else
      print_color "$GREEN" "No changes to commit for Xcode CodeSnippets."
    fi
  else
    echo "Xcode CodeSnippets directory not found."
  fi

  print_color "$GREEN" "No changes detected for any JetBrains IDEs."
}

print_color() {
  local color_code="$1"
  local text="$2"
  echo -e "\033[${color_code}m${text}\033[0m"
}

options=(
  "-h:usage"
  "-help:usage"
  "-v:echo ${version}"
  "dev:configMaceDevTable"
  "importsettings:importSettings"
  "uploadsettings:uploadSettings"
)
# 定义功能和对应的函数
functions=(
  #  "configas:configAndroidStudio"
  #  "configxc:configXCode"
  #  "configidea:configIdea"
  "config:configAll"
  #  "pushas:pushAndroidStudio"
  #  "pushxc:pushXCode"
  #  "pushidea:pushIdeaC"
  "push:pushAll"
  "deleterb:deleterb"
  "github:githubHelp"
  "opengoogle:openGoogleFolder"
  "openuserdata:openUserDataFolder"
  "openjetbrain:openJetBrainFolder"
  "macedev:makeMaceDevFolder"
  "publish:publishNewVersion"
  "makeasopen:makeASOpen"
  "asopen:openWithAndroidStudio"
  "upgrade:upgradeFunc"
  "deletelock:deleteAllLockFiles"
  "color:showColors"
  "githelp:gitHelp"
  "gitcloneother:gitCloneOther"
  "listallpub:listAllPub"
  "sshaddall:sshAddAll"
  "battlenet:battlenet"
  "howto:howToCreateMace"
  "sshkey:getSSHKey"
  "makessh:makessh"
  "setssh:setssh"
  "gitglobal:gitGlobal"
  "pubcleanget:pubCleanGet"
  "setlunchkey:setLunchKey"
  "installadb:installadb"
  "find:find_func"
  "img:reduceImage"
  "cleanmac:cleanmac"
  "resetpwd:resetpwd"
  "screenchange:screenchange"
  "ipa:ipa"
  "test:testFunc"
)

while (($# > 0)); do
  # 如果参数以 .rar 结尾，直接调用 rar() 方法
  if [[ "$1" == *.rar ]]; then
    rar "$1"
    exit
  fi

  if [[ "$1" == "-v" ]]; then
    echo "${version}"
    exit
  fi

  # 遍历选项和功能数组
  for entry in "${options[@]}" "${functions[@]}"; do
    param="${entry%%:*}"
    func="${entry#*:}"

    # 如果参数匹配，则执行相应的函数并退出循环
    if [[ "$1" == "$param" ]]; then
      $func "$@"
      exit
    fi
  done
  POSITIONAL+=("$1")
  shift
done
