#!/usr/bin/env bash

version="0.1.112"

script_name=$(basename "$0")
jim928Path=$(brew --repo)/Library/Taps/jim928
maceWorkDir="$HOME/.mace"
maceGitUrl="git@github.com:jim928/mace.git"
homebrew_mace_url="git@github.com:jim928/homebrew-mace.git"

usage() {
  # 打印可用的方法列表
  for func in "${functions[@]}"; do
    name="${func%%:*}"
    method="${func##*:}"
    echo "$name ---------- $method"
  done
}
howToCreateMace() {
  cat <<EOF
  Script name: $script_name
  Description:
  ============

  This is a script to config environment of mac dev in dev Apps
  ~/Library/Application Support/Google
  ~/Library/Developer/Xcode/UserData

  jim@jimdeMBP ~ % brew --repo
  /usr/local/Homebrew
  jim@jimdeMBP ~ % brew --repo jim928/mace
  /usr/local/Homebrew/Library/Taps/jim928/homebrew-mace

  how to publish new version of mace;
  1,new code in mace git project and commit and push;
  2,make new tag from the last commit and push;
  3,make new release from the tag just made;
  4,right click and copy the link from the release : Source code (tar.gz);
  5,open terminal , and use command : brew create linkJustCopied;
  6,input the formulaName : mace and copy the sha256 value;
  7,update the link and the sha256 to the git project : homebrew-mace and push;
  8,delete the mace.rb file created in step 7;  (use deleterb command)
EOF
}

githubHelp() {
  cat <<EOF
1，settings
2，Developer settings
3, Personal access tokens
4, Generate new token
5, set expiration and repo access check
6, generate 复制好生成的token内容
7, brew install gh
8, gh auth login
9, GitHub.com -> HTTPS -> y -> Login with a web browser
EOF
}
# shell cheat sheet https://devhints.io/bash

#homebrew 库的目录 ： jim928Path

configFunc() {
  taskName=""
  appPath=""
  gitUrl=""
  gitProjectName=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="templates"
  elif [ "$1" = 7 ]; then
    taskName="GoLandKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="keymaps"
  elif [ "$1" = 8 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="templates"
  elif [ "$1" = 9 ]; then
    taskName="PyCharmKeyMaps"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="keymaps"
  elif [ "$1" = 10 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  echo "**********************************"
  echo "--taskName : $taskName"
  echo "--appPath : $appPath"
  echo "--gitUrl : $gitUrl"
  echo "--gitProjectName : $gitProjectName"
  echo "--shouldLoop : $shouldLoop"
  echo "--appName : $appName"
  echo "--finalFolder : $finalFolder"

  echo "now start config for task : $taskName"

  cd "$jim928Path" || echo "cd to path failed :$jim928Path"

  #文件夹存在则删除其内容
  if [ -d "$gitProjectName" ]; then
    rm -rf ./"$gitProjectName"
    echo "removing all files in $gitProjectName"
  fi

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist, now delete it and mkdir"
        rm -rf "$finalFolder"
      fi

      #clone的时候修改文件名称为 finalFolder
      git clone "$gitUrl" "$finalFolder"
    done
  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist, now delete it and mkdir"
      rm -rf "$finalFolder"
    fi

    #clone的时候修改文件名称为 finalFolder
    git clone "$gitUrl" "$finalFolder"
  fi

  echo "task $taskName done"
}

configAndroidStudio() {
  configFunc 1
  configFunc 2
}

configXCode() {
  configFunc 3
}

configIdea() {
  configFunc 5
  configFunc 6
  configFunc 7
  configFunc 8
  configFunc 9
  configFunc 10
}
configAll() {
  configAndroidStudio
  configXCode
  configIdea
}

deleterb() {
  find $(brew --repo)/Library/Taps/homebrew/homebrew-core -name 'mace.rb' -type f -print -exec rm -rf {} \;
}

openGoogleFolder() {
  open ~/Library/Application\ Support/Google
}
openUserDataFolder() {
  open ~/Library/Developer/Xcode/UserData
}
openJetBrainFolder() {
  open ~/Library/Application\ Support/JetBrains
}

getSSHKey() {
  # 查找 ~/.ssh/ 目录下所有的 .pub 文件
  pub_files=$(find ~/.ssh -name "*.pub")
  pub_files_array=($pub_files)

  if [ ${#pub_files_array[@]} -gt 0 ]; then
    echo "找到以下SSH公钥文件："
    select pub_file in "${pub_files_array[@]}"; do
      if [ -n "$pub_file" ]; then
        # 将选定的公钥文件内容复制到剪贴板
        cat "$pub_file" | pbcopy
        echo "$pub_file 现在已经复制到剪贴板"
        break
      else
        echo "无效选择。"
      fi
    done
  else
    echo "未找到SSH公钥文件，现在生成一个。"
    makessh
  fi
}

pushFuc() {
  taskName=""
  appPath=""
  gitUrl=""
  shouldLoop="1"
  appName=""
  finalFolder=""

  if [ "$1" = 1 ]; then
    taskName="AndroidStudioKeyMaps"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="keymaps"
  elif [ "$1" = 2 ]; then
    taskName="AndroidStudioTemplates"
    appPath=~/Library/Application\ Support/Google
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="AndroidStudio"
    finalFolder="templates"
  elif [ "$1" = 3 ]; then
    taskName="XCodeCodeSnippets"
    appPath=~/Library/Developer/Xcode/UserData
    gitUrl="https://github.com/jim928/CodeSnippets.git"
    gitProjectName="CodeSnippets"
    shouldLoop="0"
    appName="XCode"
    finalFolder="CodeSnippets"
  elif [ "$1" = 5 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="keymaps"
  elif [ "$1" = 6 ]; then
    taskName="IntellijIdeaCTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="IntelliJIdea"
    finalFolder="templates"
  elif [ "$1" = 7 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="keymaps"
  elif [ "$1" = 8 ]; then
    taskName="GoLandTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="GoLand"
    finalFolder="templates"
  elif [ "$1" = 9 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/keymapsas.git"
    gitProjectName="keymapsas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="keymaps"
  elif [ "$1" = 10 ]; then
    taskName="PyCharmTemplates"
    appPath=~/Library/Application\ Support/JetBrains
    gitUrl="https://github.com/jim928/templatesas.git"
    gitProjectName="templatesas"
    shouldLoop="1"
    appName="PyCharm"
    finalFolder="templates"
  fi

  if [[ -z "$taskName" ]]; then
    echo "unknown task name "
    return
  fi

  echo "**********************************"
  echo "--taskName : $taskName"
  echo "--appPath : $appPath"
  echo "--gitUrl : $gitUrl"
  echo "--gitProjectName : $gitProjectName"
  echo "--shouldLoop : $shouldLoop"
  echo "--appName : $appName"
  echo "--finalFolder : $finalFolder"

  cd "$appPath" || echo "cd to path failed :$appPath"
  echo "current path : $appPath"

  if [ $shouldLoop = "1" ]; then
    #android studio的快捷键配置文件路径举例为
    #~/Library/Application\ Support/Google/AndroidStudio2021.1/keymaps/macOS\ copy.xml
    #因此先找到已安装的所有AS不同版本文件夹

    for i in "$appPath"/"$appName"*; do
      echo "$i"
      cd "$i" || echo "cd to path failed :$i"

      if [ -d "$finalFolder" ]; then
        echo "dir $finalFolder exist"
        cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

        if [ -n "$(git status --porcelain)" ]; then
          echo "there is change to push , now commit and push"
          git add .
          git commit -m "triggled by auto check from mace}." -a
          git push "${gitUrl}" HEAD:master
        else
          echo "nothing to update."
        fi
      else
        echo "folder /$finalFolder not exist , no need to push"
      fi
    done

  else

    if [ -d "$finalFolder" ]; then
      echo "dir $finalFolder exist"
      cd ./"$finalFolder" || echo "cd to path failed :$finalFolder"

      if [ -n "$(git status --porcelain)" ]; then
        echo "there is change to push , now commit and push"
        git add .
        git commit -m "triggled by auto check from mace}." -a
        git push "${gitUrl}" HEAD:master
      else
        echo "nothing to update."
      fi
    else
      echo "folder /$finalFolder not exist , no need to push"
    fi
  fi

  echo "task $taskName done"
}

pushAndroidStudio() {
  pushFuc 1
  pushFuc 2
}
pushXCode() {
  pushFuc 3
}
pushIdeaC() {
  pushFuc 5
  pushFuc 6
  pushFuc 7
  pushFuc 8
  pushFuc 9
  pushFuc 10
}
pushAll() {
  pushAndroidStudio
  pushXCode
  pushIdeaC
}
#################### test func ####################
testFunc() {
  echo "testFunc"
}
####################### make open in android studio work flow  ####################
makeASOpen() {
  createMaceFolder
  createZSHRC
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  if [ -d "publicfiles" ]; then
    echo "dir publicfiles exist"
  else
    echo "dir publicfiles not exist, now clone"
    git clone https://github.com/jim928/publicfiles.git
  fi
  echo "coping publicfiles to ~/Library/Services/"
  cp -r publicfiles/* ~/Library/Services/
}
createMaceFolder() {
  if [ ! -d "$maceWorkDir" ]; then
    mkdir "$maceWorkDir"
  fi
}
createZSHRC() {
  #!/bin/bash
  zshrc_path="$HOME/.zshrc"
  # 检查是否存在 .zshrc 文件
  if [ ! -f "$zshrc_path" ]; then
    # 如果不存在，则创建 .zshrc 文件
    echo "Creating .zshrc file..."
    touch "$zshrc_path"

    # 在 .zshrc 文件中添加一些示例内容
    echo '#this is a new .zshrc' >>"$zshrc_path"
    #    echo 'export PATH=/Applications/Android\ Studio.app/Contents/MacOS/' >>"$zshrc_path"
    echo "export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Android Studio.app/Contents/MacOS/:$PATH"" >>"$zshrc_path"

    echo "Done! You can customize the .zshrc file as needed."
    source "$zshrc_path"
  else
    # 如果已经存在 .zshrc 文件，则将/Applications/Android Studio.app/Contents/MacOS 路径加入环境变量
    echo "export PATH="/Applications/Android Studio.app/Contents/MacOS:$PATH"" >>"$zshrc_path"
    source "$zshrc_path"
    echo ".zshrc file already exists. add Applications/Android Studio.app/Contents/MacOS to path in .zshrc"
  fi
}

####################### mace work foler ####################
makeMaceDevFolder() {
  echo "makeMaceDevFolder"
  createMaceFolder
  cd "$maceWorkDir" || echo "cd to path failed :$maceWorkDir"
  git clone "${maceGitUrl}"
}

#################### publish new version of mace ####################
publishNewVersion() {
  cd "$maceWorkDir/mace" || echo "cd to path failed :$maceWorkDir/mace"

  # 删除所有本地标签
  git tag -l | xargs git tag -d >/dev/null 2>&1

  # 拉取最新标签
  git fetch --tags >/dev/null 2>&1
  git pull

  # 修改版本号
  # 获取当前文件夹下 mace 文件的版本号
  current_version=$(grep 'version=' mace | sed -n 's/version="\([^"]*\)".*/\1/p' | head -n 1)

  # 递增版本号
  new_version=$(awk -F. -v OFS=. '{print $1,$2,$3+1}' <<<"$current_version")

  # 使用 sed 命令替换文件中的 version 变量
  sed -i '' "s/version=\"$current_version\"/version=\"$new_version\"/" mace

  # 输出新版本号``
  echo "Old Version: $current_version"
  echo "New Version: $new_version"

  # 获取当前日期
  current_date=$(date +"%Y-%m-%d")
  git add .
  git commit -m "publishMac commit from mace - ${current_date}." -a
  #  git push "${maceGitUrl}" HEAD:master

  # 创建新 tag
  git tag -a "$new_version" -m "$new_version"

  # 推送所有分支和标签
  git push "${maceGitUrl}" HEAD:master
  echo "push mace changes to $maceGitUrl done"
  git push --tags "${maceGitUrl}"
  echo "push mace tags to $maceGitUrl done"

  ########## release new version to github ########
  # Replace with your GitHub username and repository name
  USERNAME="jim928"
  REPO="mace"

  # Replace with the tag name you want to create a release from
  TAG="$new_version"

  RELEASE_NOTES="Release notes for version $TAG"

  echo "Creating GitHub release..."
  response=$(curl -s -X POST \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Content-Type: application/json" \
    "https://api.github.com/repos/$USERNAME/$REPO/releases" \
    -d "{\"tag_name\":\"$TAG\",\"name\":\"$TAG\",\"body\":\"$RELEASE_NOTES\"}")

  # Print the response from GitHub API
  echo "$response"

  # Extract the release ID from the response
  release_id=$(echo "$response" | jq -r '.id')
  echo "Release ID: $release_id"

  # 提取源代码（tar.gz）文件的下载链接
  download_url="https://github.com/jim928/mace/archive/refs/tags/$new_version.tar.gz"

  # 打印下载链接
  echo "源代码下载链接: $download_url"

  ######## 开始brew 发布 流程 ########
  # Formula name
  formula_name="mace"

  # Source URL
  source_url="$download_url"

  ######## 生成 mace.rb 文件 ########

  # Homebrew Core Formula directory
  formula_directory="$HOME/.mace/homebrew-mace"

  # if formula_directory not exist, clone it else update it
  if [ ! -d "$formula_directory" ]; then
    echo "homebrew-mace directory does not exist. Cloning..."
    mkdir -p "$formula_directory"
    git clone "${homebrew_mace_url}" "$formula_directory"
  else
    echo "homebrew-mace directory exists. Updating..."
    cd "$formula_directory" || {
      echo "cd to path failed: $formula_directory"
      exit 1
    }
    git fetch && git pull
  fi

  cd "$formula_directory" || {
    echo "cd to path failed: $formula_directory"
    exit 1
  }

  mace_formula_path="$formula_directory/$formula_name.rb"

  # Create mace.rb with SHA256 checksum
  echo "class Mace < Formula" >"$mace_formula_path"
  echo "  desc \"Your description here\"" >>"$mace_formula_path"
  echo "  homepage \"https://github.com/jim928/mace\"" >>"$mace_formula_path"
  echo "  url \"$source_url\"" >>"$mace_formula_path"
  echo "  sha256 \"$(curl -Ls "$source_url" | shasum -a 256 | cut -d ' ' -f 1)\"" >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  # ... 其他 Formula 配置信息 ..." >>"$mace_formula_path"
  echo "" >>"$mace_formula_path"
  echo "  def install" >>"$mace_formula_path"
  echo "    bin.install 'mace'" >>"$mace_formula_path"
  echo "  end" >>"$mace_formula_path"
  echo "end" >>"$mace_formula_path"

  # Print the path to the created mace.rb file
  echo "Formula file created at: $mace_formula_path"

  git add .
  git commit -m "publish mace.rb $new_version commit from mace}." -a
  git push "${homebrew_mace_url}" HEAD:master
}

################ upgrade mace version from brew ###############
upgradeFunc() {
  brew uninstall mace
  brew untap jim928/mace
  brew tap jim928/mace
  brew install mace
}

################ delete all .lock files ################
deleteAllLockFiles() {
  echo "find . -name '*.lock' -type f -print -exec rm -rf {} \;"
  find . -name '*.lock' -type f -print -exec rm -rf {} \;
}

showColors() {
  echo "透明度从100%到0%的16进制值及对应百分比："
  colorList="100% — FF,99% — FC,98% — FA,97% — F7,96% — F5,95% — F2,94% — F0,93% — ED,92% — EB,91% — E8,90% — E6,89% — E3,88% — E0,87% — DE,86% — DB,85% — D9,84% — D6,83% — D4,82% — D1,81% — CF,80% — CC,79% — C9,78% — C7,77% — C4,76% — C2,75% — BF,74% — BD,73% — BA,72% — B8,71% — B5,70% — B3,69% — B0,68% — AD,67% — AB,66% — A8,65% — A6,64% — A3,63% — A1,62% — 9E,61% — 9C,60% — 99,59% — 96,58% — 94,57% — 91,56% — 8F,55% — 8C,54% — 8A,53% — 87,52% — 85,51% — 82,50% — 80,49% — 7D,48% — 7A,47% — 78,46% — 75,45% — 73,44% — 70,43% — 6E,42% — 6B,41% — 69,40% — 66,39% — 63,38% — 61,37% — 5E,36% — 5C,35% — 59,34% — 57,33% — 54,32% — 52,31% — 4F,30% — 4D,29% — 4A,28% — 47,27% — 45,26% — 42,25% — 40,24% — 3D,23% — 3B,22% — 38,21% — 36,20% — 33,19% — 30,18% — 2E,17% — 2B,16% — 29,15% — 26,14% — 24,13% — 21,12% — 1F,11% — 1C,10% — 1A,9% — 17,8% — 14,7% — 12,6% — 0F,5% — 0D,4% — 0A,3% — 08,2% — 05,1% — 03,0% — 00"
  echo "$colorList" | tr ',' '\n'
}

makessh() {
  read -p "Enter the key name suffix (the full key name will be id_ed25519_[your_input]): " key_suffix
  key_name="id_ed25519_$key_suffix"
  key_path="$HOME/.ssh/$key_name"

  # Generate the SSH key
  read -p "Enter your email associated with your GitHub account: " email
  ssh-keygen -t ed25519 -C "$email" -f "$key_path"

  # Start the ssh-agent in the background
  eval "$(ssh-agent -s)"

  # On macOS, use -K to store the passphrase in your keychain
  ssh-add -K "$key_path"

  # Copy the SSH public key to your clipboard
  pbcopy <"${key_path}.pub"
  echo "The SSH public key has been copied to your clipboard. Please add it to your GitHub account."

  # Instructions to add the key to GitHub
  echo "1. Go to GitHub and log in."
  echo "2. Click on your profile photo, then click Settings."
  echo "3. In the user settings sidebar, click SSH and GPG keys."
  echo "4. Click New SSH key or Add SSH key."
  echo "5. In the Title field, add a descriptive label for the new key."
  echo "6. Paste your key into the Key field (it's already on your clipboard)."
  echo "7. Click Add SSH key."
  echo "8. If prompted, confirm your GitHub password."

  # Check if the current directory is a Git repository
  if [ -d ".git" ]; then
    read -p "Do you want to configure Git to use this SSH key for GitHub operations in this repository? (y/n): " response
    case "$response" in
    [yY][eE][sS] | [yY])
      # Set the specific SSH key for GitHub operations in this repository
      git config core.sshCommand "ssh -i $key_path -F /dev/null"
      echo "Git is now configured to use this SSH key for GitHub operations in this repository."
      ;;
    *)
      echo "You can manually configure Git to use this SSH key for GitHub operations in this repository by executing the following command:"
      echo "git config core.sshCommand \"ssh -i $key_path -F /dev/null\""
      ;;
    esac
  fi
}

gitHelp() {
  echo "----------------------------"
  echo "指定仓库使用某一个sshkey文件"
  echo "git config --global core.sshCommand \"ssh -i /Users/griffin/.ssh/id_ed25519_gitlab -F /dev/null\""
  echo "检查是否设置成功"
  echo "git config --get core.sshCommand"
  echo "----------------------------"
  echo "clone的时候指定使用某个sshkey"
  echo "GIT_SSH_COMMAND='ssh -i /Users/griffin/.ssh/id_ed25519_gitlab' git clone git@gitlab.com:abc/def.git"
  echo "----------------------------"
  echo "merge 冲突 操作帮助"
  echo "取消本次合并 git merge --abort"
  echo "处理冲突后发现某个文件需要重新处理一次冲突 git checkout --conflict=merge -- example.dart"
}
gitCloneOther() {
  echo "将仓库A的分支branch1代码合并到仓库B的分支branch2"
  echo "git clone git@github.com:user/repoB.git"
  echo "cd repoB"
  echo "git remote add repoA git@github.com:user/repoA.git"
  echo "git fetch repoA"
  echo "git checkout branch2"
  echo "git merge repoA/branch1"
  echo "然后处理合并产生的冲突"
}
listAllPub() {
  echo "列出所有.pub公钥文件，这些文件会添加到github或gitlab网站上"
  echo "for file in ~/.ssh/*.pub; do echo "$file"; cat "$file"; echo; done"
  for file in ~/.ssh/*.pub; do
    echo "$file"
    cat "$file"
    echo
  done
}
sshAddAll() {
  #!/bin/bash

  # 查找 ~/.ssh 目录下的所有私钥文件
  private_keys=($(find ~/.ssh -type f -name '*.pub' -exec basename {} .pub \;))

  # 初始化一个数组来存储唯一的私钥文件路径
  unique_keys=()

  # 遍历私钥文件列表，确保每个私钥文件对应的公钥文件也存在，然后添加到数组中
  for key in "${private_keys[@]}"; do
    if [[ -f ~/.ssh/"$key" && -f ~/.ssh/"$key".pub ]]; then
      # 检查私钥文件是否已经存在于数组中
      exists=false
      for unique_key in "${unique_keys[@]}"; do
        if [[ "$key" == "$unique_key" ]]; then
          exists=true
          break
        fi
      done

      # 如果私钥文件不在数组中，则添加到数组并添加到 SSH agent
      if ! "$exists"; then
        unique_keys+=("$key")
        echo "Identity added: ~/.ssh/$key"
        # 添加私钥文件到 SSH agent
        ssh-add ~/.ssh/"$key"
      fi
    fi
  done

  # 打印 SSH agent 中的私钥文件
  echo "SSH agent 中的私钥文件："
  ssh-add -l
}
battlenet() {
  echo "1,Delete the Battle Net folder in /Users/Shared/"
  echo "2,Download the battle.net agent in /en-US/ region, I’m not allowed to post links here."
  echo "3,Open Terminal on Mac and copy this code: open -a ~/Downloads/Battle.net-Setup.app --args --locale=enUS --region=US --session=, then tap Enter."
}
setssh() {
  # 检查当前目录是否是Git仓库
  if git rev-parse --git-dir >/dev/null 2>&1; then
    echo "当前目录是一个Git仓库。"

    # 列出~/.ssh目录下所有的私钥文件
    echo "可用的SSH密钥文件："
    key_files=$(find ~/.ssh -type f ! -name "*.pub" ! -name "config" ! -name "known_hosts")
    select key_path in $key_files; do
      if [ -n "$key_path" ]; then
        # 设置选定的SSH密钥
        git config core.sshCommand "ssh -i $key_path -F /dev/null"
        echo "git config core.sshCommand \"ssh -i $key_path -F /dev/null\""
        echo "已设置SSH密钥：$key_path"
        break
      else
        echo "无效的选择。"
      fi
    done
  else
    echo "当前目录不是一个Git仓库。"
  fi
}
gitGlobal() {
  echo "# 查看所有全局配置"
  echo "git config --global --list"
  echo "# 设置全局用户名"
  echo "git config --global user.name \"Alice\""
  echo "# 设置全局邮箱"
  echo "git config --global user.email \"alice@example.com\""
}
#用Android studio 打开当前文件夹
openWithAndroidStudio() {
    if [ -z "$1" ]; then
        open -a "Android Studio" .
    else
        open -a "Android Studio" "$1"
    fi
}
##############################  最终调用 ############################

# 定义选项和对应的函数
options=(
  "-h:usage"
  "-help:usage"
  "-v:echo ${version}"
  "-version:echo ${version}"
)
# 定义功能和对应的函数
functions=(
  #  "configas:configAndroidStudio"
  #  "configxc:configXCode"
  #  "configidea:configIdea"
  "config:configAll"
  #  "pushas:pushAndroidStudio"
  #  "pushxc:pushXCode"
  #  "pushidea:pushIdeaC"
  "push:pushAll"
  "deleterb:deleterb"
  "github:githubHelp"
  "opengoogle:openGoogleFolder"
  "openuserdata:openUserDataFolder"
  "openjetbrain:openJetBrainFolder"
  "macedev:makeMaceDevFolder"
  "publish:publishNewVersion"
  "makeasopen:makeASOpen"
  "asopen:openWithAndroidStudio"
  "upgrade:upgradeFunc"
  "deletelock:deleteAllLockFiles"
  "color:showColors"
  "githelp:gitHelp"
  "gitcloneother:gitCloneOther"
  "listallpub:listAllPub"
  "sshaddall:sshAddAll"
  "battlenet:battlenet"
  "howto:howToCreateMace"
  "sshkey:getSSHKey"
  "makessh:makessh"
  "setssh:setssh"
  "gitglobal:gitGlobal"
  "test:testFunc"
)

while (($# > 0)); do
  # 遍历选项和功能数组
  for entry in "${options[@]}" "${functions[@]}"; do
    param="${entry%%:*}"
    func="${entry#*:}"

    # 如果参数匹配，则执行相应的函数并退出循环
    if [[ "$1" == "$param" ]]; then
      $func
      exit
    fi
  done
  POSITIONAL+=("$1")
  shift
done
